#!/usr/bin/env sh
#
# BSD 3-Clause License
#
# Copyright (c) 2023, Justin Teague
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ddnsbot: dynamically update DNS IP records

set -eu

LC_ALL=C

DDNSBOT_PRGNAM="ddnsbot"
DDNSBOT_VERSION='0.0.42'
DDNSBOT_VERBOSITY=${DDNSBOT_VERBOSITY:-0}

DDNSBOT_PUBLIC_IP_SERVERS_4="
https://ipv4.seeip.org
https://api4.ipify.org
https://ipv4.icanhazip.com"

DDNSBOT_PUBLIC_IP_SERVERS_6="
https://ipv6.seeip.org
https://api6.ipify.org
https://ipv6.icanhazip.com"

usage() (
  cat << EOF
$DDNSBOT_PRGNAM -- Version $DDNSBOT_VERSION

USAGE:
$DDNSBOT_PRGNAM -46v -D <dns_api> -i <address> -P <url> -T <token> -d <zone:domain> [list|update]

  -4        Use IPv4 address (Default)
  -6        Use IPv6 address
  -d        Domain, or optionally, zone:domain
  -D        DNS Provider, e.g., "cloudflare"
  -i        Force an ip address, bypassing the public IP check.
  -P        Custom public IP reflector (optional)
  -T        API Token, either a string or a path to the file
  -v	      Increase verbosity

COMMANDS
  list			List the current public IP address and, if specified, the IP address of the domain.
  update    Update the DNS IP address to match the public IP address of the server.

EXAMPLES
  List the current IP address of a domain:
  ddnsbot -d example.org list

  Update two DNS records to the public IPv4 address of the server:
	ddnsbot -4 -D cloudflare -T ~/.secrets/cloudflare.ini -d example.org -d my.example.com update

  Update a DNS record to a specific IP address:
  ddnsbot -D hetzner -T "0987654321ABCD" -i 192.168.0.1 -d local.internal.example.com

EOF
)

err() (
  datestamp="$(TZ=UTC date +%Y-%m-%dT%TZ)"
  printf >&2 '[%s] ERROR: %s\n' "$datestamp" "$*"
)

inf() (
  if [ "$DDNSBOT_VERBOSITY" -gt 0 ]; then
    datestamp="$(TZ=UTC date +%Y-%m-%dT%TZ)"
    printf >&2 '[%s] %s\n' "$datestamp" "$*"
  fi
)

warn() (
  if [ "$DDNSBOT_VERBOSITY" -gt 0 ]; then
    datestamp="$(TZ=UTC date +%Y-%m-%dT%TZ)"
    printf >&2 '[%s] WARN: %s\n' "$datestamp" "$*"
  fi
)

http__curl() (
  # Usage: use as a stand-in for curl, less the -sS options.
  retval=0 response="" ret=""
  if ! response=$(mktemp 2>&1); then
    printf %s\\n "$response"
    return 1
  fi

  if ! ret=$("$(command -v curl)" -sS \
    -o "$response" \
    -w '%{http_code}' \
    "$@" 2>&1); then
    printf %s\\n "$ret" > "$response"
    retval=1
  fi

  if [ $retval -eq 0 ] && [ "$ret" -ge 400 ]; then
    printf 'HTTP Error Code: %s\n' "$ret"
    retval=1
  fi

  cat "$response"
  rm -rf "$response"
  return $retval
)

dependency_check() (
  # Usage: required <binaries>
  # Returns: 0 if present or 1 if not

  retval=0
  missing=""
  # $@ intentionally split for array
  # shellcheck disable=SC2068
  for b in $@; do
    if ! command -v "$b" > /dev/null 2>&1; then
      missing="$missing $b"
      retval=$((retval + 1))
    fi
  done

  if [ "$retval" -gt 0 ]; then
    for m in $missing; do
      printf 'dependency %s not found in PATH\n' "$m"
    done
  fi

  return "$retval"
)

get_zones_from_domain() (
  # Usage: <domain.tld>
  # Returns: List of possible zone names derived from domain
  # Example: zones_from_domain my.example.com returns: com example.com my.example.com
  domain="${1?zones_from_domain: no domain specified}"
  case "$domain" in
    *:*)
      printf %s\\n "${domain%:*}"
      return
      ;;
  esac
  zones="$domain"
  while true; do
    domain=${domain#*.}
    zones="$domain $zones"
    case "$domain" in
      *.*) continue ;;
      *)
        printf %s\\n "$zones"
        return
        ;;
    esac
  done
)

ddnsbot_get_public_ip() (
  # USAGE: <ip address list>
  # RETURNS: IP address or "1" if error

  for ip in $1; do
    if ! res=$(http__curl \
      --connect-timeout 10 \
      --url "$ip" 2>&1); then
      warn "$res"
    else
      printf %s\\n "$res"
      return 0
    fi
  done
  printf "Couldn't get public IP address from %s\n" "$1"
  return 1

)

cloudflare__verify_token() (
  # Receives: Token string or file path
  # Checks for dns_cloudflare_api_token
  # Note: using a global api key is not currently supported
  if [ -f "$1" ]; then
    while read -r line; do
      case "$line" in
        \#*) continue ;; # skip commented lines
        dns_cloudflare_api_token*=*)
          token="${line##*=}"
          # strip leading and trailing spaces
          token="${token#*\ }"
          token="${token%\ *}"
          break
          ;;
        *) continue ;;
      esac
    done < "$1"
    if [ -z "${token:-}" ]; then
      printf "No matching key from file %s\n" "$1"
      return 1
    fi
  else
    # if not a file, must be a string
    token="$1"
  fi

  # verify token
  if ! verify_json="$(http__curl \
    --request GET \
    --url https://api.cloudflare.com/client/v4/user/tokens/verify \
    --header "Authorization: Bearer $token" \
    --header "Content-Type: application/json")"; then
    printf %s\\n "$verify_json"
    return 1
  fi

  # Confirm the JSON was successful
  success="$(printf %s\\n "$verify_json" | jq -r .success)"
  case "$success" in
    true) printf %s\\n "$token" ;; # if true
    *)
      printf %s\\n "$verify_json"
      return 1
      ;; # if anything else
  esac

)

cloudflare__get_zone_id() (
  # check for args
  if [ $# -eq 0 ]; then
    printf 'improper use of cloudflare__get_zone_id'
    return 1
  fi

  # parse args
  while [ $# -gt 0 ]; do
    case "$1" in
      -z)
        zone_name="$2"
        shift 2
        ;;
      -T)
        token="$2"
        shift 2
        ;;
      *)
        printf 'illegal argument: %s\n' "$1"
        return 1
        ;;
    esac
  done

  if ! dns_zones_json="$(http__curl \
    --request GET \
    --url https://api.cloudflare.com/client/v4/zones \
    --header 'Content-Type: application/json' \
    --header "Authorization: Bearer $token")"; then
    printf %s\\n "$dns_zones_json"
    return 1
  fi

  total_count="$(printf %s\\n "$dns_zones_json" \
    | jq -r '.result | length')"

  while [ "$total_count" -gt 0 ]; do
    total_count=$((total_count - 1)) # adjust for counting from zero
    dns_name="$(printf %s\\n "$dns_zones_json" \
      | jq -r .result["$total_count"].name)"

    dns_id="$(printf %s\\n "$dns_zones_json" \
      | jq -r .result["$total_count"].id)"

    case "$dns_name" in
      "$zone_name")
        printf %s\\n "$dns_id"
        return
        ;;
    esac
  done
  return 1
)

cloudflare__get_domain_id() (
  # parse args
  while [ $# -gt 0 ]; do
    case "$1" in
      -z)
        zone_id="$2"
        shift 2
        ;;
      -d)
        domain_name="$2"
        shift 2
        ;;
      -T)
        token="$2"
        shift 2
        ;;
      *)
        printf 'illegal argument: %s\n' "$1"
        return 1
        ;;
    esac
  done

  if ! dns_domain_json="$(http__curl \
    --request GET \
    --url https://api.cloudflare.com/client/v4/zones/"$zone_id"/dns_records \
    --header 'Content-Type: application/json' \
    --header "Authorization: Bearer $token")"; then
    printf %s\\n "$dns_domain_json"
    return 1
  fi

  total_count="$(printf %s\\n "$dns_domain_json" \
    | jq -r '.result | length')"

  while [ "$total_count" -gt 0 ]; do
    total_count=$((total_count - 1)) # adjust for counting from zero
    dns_name="$(printf %s\\n "$dns_domain_json" \
      | jq -r .result["$total_count"].name)"

    dns_id="$(printf %s\\n "$dns_domain_json" \
      | jq -r .result["$total_count"].id)"

    case "$dns_name" in
      "$domain_name")
        printf %s\\n "$dns_id"
        return
        ;;
    esac
  done
  return 1
)

cloudflare__get_domain_ip() (
  # parse args
  while [ $# -gt 0 ]; do
    case "$1" in
      -z)
        zone_id="$2"
        shift 2
        ;;
      -i)
        domain_id="$2"
        shift 2
        ;;
      -T)
        token="$2"
        shift 2
        ;;
      *)
        printf 'illegal argument: %s\n' "$1"
        return 1
        ;;
    esac
  done

  if ! dns_domain_json="$(http__curl \
    --request GET \
    --url https://api.cloudflare.com/client/v4/zones/"$zone_id"/dns_records/"$domain_id" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Bearer $token")"; then
    printf %s\\n "$dns_domain_json"
    return 1
  fi

  printf %s\\n "$dns_domain_json" | jq -r '.result.content' || return 1

)

cloudflare__update_dns_ip() (
  # parse args
  while [ $# -gt 0 ]; do
    case "$1" in
      -z)
        zone_id="$2"
        shift 2
        ;;
      -i)
        domain_id="$2"
        shift 2
        ;;
      -p)
        ip_address="$2"
        shift 2
        ;;
      -T)
        token="$2"
        shift 2
        ;;
      *)
        printf 'illegal argument: %s\n' "$1"
        return 1
        ;;
    esac
  done

  if ! update_dns="$(http__curl \
    --request PATCH \
    --url https://api.cloudflare.com/client/v4/zones/"$zone_id"/dns_records/"$domain_id" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Bearer $token" \
    --data '{"content": "'"$ip_address"'"}')"; then
    printf %s\\n "$update_dns"
    return 1
  fi
)

main() {

  ddnsbot_ip_version=0

  # dependency check
  dependencies="curl jq"
  if ! check=$(dependency_check "$dependencies"); then
    err "$check"
    return 1
  fi

  # parse flags
  if [ $# -eq 0 ]; then
    usage
    return 1
  fi

  while [ $# -gt 0 ]; do
    case "$1" in
      -d)
        domains="${domains:-} $2"
        shift 2
        ;;
      -D)
        dns_api_plugin="$2"
        shift 2
        ;;
      -i)
        public_ip_address="$2"
        shift 2
        ;;
      -P)
        public_ip_reflector="$2"
        shift 2
        ;;
      -T)
        dns_api_token="$2"
        shift 2
        ;;
      -*) # parse bool flags
        while getopts :46Yv bool; do
          case "$bool" in
            4) ddnsbot_ip_version=$((ddnsbot_ip_version + 4)) ;;
            6) ddnsbot_ip_version=$((ddnsbot_ip_version + 6)) ;;
            Y) prompt=Y ;;
            v) DDNSBOT_VERBOSITY=$((DDNSBOT_VERBOSITY + 1)) ;;
            *) continue ;;
          esac
        done
        shift
        ;;
      list | update)
        command="$1"
        shift
        ;;
      *)
        usage
        return 1
        ;;
    esac
  done

  # make default action to list
  command="${command:=list}"

  # Set DDNSBOT_PUBLIC_IP_URL
  if [ -z "${public_ip_reflector:-}" ]; then
    if [ $ddnsbot_ip_version -le 4 ]; then
      public_ip_reflector="$DDNSBOT_PUBLIC_IP_SERVERS_4"
    elif [ $ddnsbot_ip_version -eq 6 ]; then
      public_ip_reflector="$DDNSBOT_PUBLIC_IP_SERVERS_6"
    elif [ $ddnsbot_ip_version -ge 10 ]; then
      public_ip_reflector="$DDNSBOT_PUBLIC_IP_SERVERS_6 \
        $DDNSBOT_PUBLIC_IP_SERVERS_4"
    fi
  fi

  # Get public IP address
  if [ -z "${public_ip_address:-}" ]; then
    for addr in $public_ip_reflector; do
      inf "Checking IP address from: $addr..."
      if public_ip_address=$(ddnsbot_get_public_ip "$addr"); then
        break
      else
        err "$public_ip_address"
        public_ip_address=""
      fi
    done
    if [ -z "$public_ip_address" ]; then
      err "No public IP address found."
      return 1
    fi
  fi

  if [ "$command" = "list" ]; then
    printf 'Host public IP address: %s\n' "$public_ip_address"
  else
    inf "Host public IP address: $public_ip_address"
  fi

  if [ -z "${domains:-}" ]; then
    err "No domains specified."
    return 1
  fi

  if [ -z "${dns_api_plugin:-}" ]; then
    err "No DNS plugin specified."
    return 1
  fi

  if [ -z "${dns_api_token:-}" ]; then
    err "No DNS API Token."
    return 1
  fi

  # Verify the token
  if ! dns_api_token="$("${dns_api_plugin}"__verify_token "$dns_api_token")"; then
    err "Unable to verify DNS API Token with $dns_api_plugin."
    warn "$dns_api_token"
    return 1
  fi

  # Process the domain
  for d in $domains; do
    if ! zone_list="$(get_zones_from_domain "$d")"; then
      err "Unable to get zones from $d"
      return 1
    fi

    # Drop the zone if specificed in the domain
    case "$zone_list" in
      *:*) d="${d#*:}" ;;
    esac

    # Get the one ID
    for z in $zone_list; do
      if dns_zone_id="$("${dns_api_plugin}"__get_zone_id \
        -z "$z" -T "$dns_api_token")"; then
        inf "Found zone id for $z: $dns_zone_id"
        break
      else
        dns_zone_id=""
      fi
    done

    if [ -z "${dns_zone_id:-}" ]; then
      err "Unable to get zone ID for $d"
      continue
    fi

    # Get the domain ID
    if ! dns_domain_id="$("${dns_api_plugin}"__get_domain_id \
      -z "$dns_zone_id" -d "$d" -T "$dns_api_token")"; then
      err "Cannot get domain ID for $d. Does it exist?"
      return 1
    fi
    inf "DNS Domain ID for $d is $dns_domain_id"

    # Get the current domain IP address
    if ! dns_domain_ip="$("${dns_api_plugin}"__get_domain_ip \
      -z "$dns_zone_id" -i "$dns_domain_id" -T "$dns_api_token")"; then
      err "Cannot get domain ip address for $d. Does it exist?"
      return 1
    fi

    # If command list, list the current details
    if [ "$command" = "list" ]; then
      printf 'IP address for %s: %s\n' "$d" "$dns_domain_ip"
    else
      inf "IP address for $d is $dns_domain_ip"
    fi

    # If command update, update the domain IP address with Public IP Address
    if [ "$command" != "update" ]; then
      continue
    fi

    if [ "$public_ip_address" != "$dns_domain_ip" ]; then
      if [ "${prompt:-}" != "Y" ]; then
        printf 'Update %s from %s to %s? [y/N] ' \
          "$d" "$dns_domain_ip" "$public_ip_address"
        read -r prompt
      fi
      case "$prompt" in y | Y)
        if ! update="$("${dns_api_plugin}"__update_dns_ip \
          -z "$dns_zone_id" \
          -i "$dns_domain_id" \
          -p "$public_ip_address" \
          -T "$dns_api_token")"; then
          err "Unable to update $d to $public_ip_address"
          err "$update"
          continue
        fi
        inf "$d successfully updated to $public_ip_address"
        ;;
      *) continue ;;
      esac
    fi

  done # end of $domains loop
}

main "$@"
